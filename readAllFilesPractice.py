from pathlib import Path
from opseqtoindex import opseq_to_index

opseq_labels = []

class opseqLabels:
    def __init__(self, opseq: list[int], label: int):
        self.opseq = opseq
        self.label = label

def printListOpseqLabels(list: list[opseqLabels]): 
    for i in range(len(list)): 
        print(list[i].opseq)
        print(list[i].label)

def readFiles(): 
    files = Path("./B2").glob('*.opseq')
    for f in files:
        #print("Entering the loop")  # Add this line to check if the loop is entered
        """
        Yes, that's correct! In the context of the provided code, f represents the path to the file 
        (a Path object), and file represents the file object (a TextIOWrapper object) that allows you 
        to interact with the contents of the file specified by the path f.
        """

        #with open(f, "r") as file:
        #print("\n\nnew file\n\n")

        indices_list = open_opseq(f)
        assert 218 in indices_list
        data = opseqLabels(indices_list, 1)
        #print(data.opseq)
        #print(data.label)
        opseq_labels.append(data)
            
            #line = file.readline()
            #print(line)

            # Print the list of file paths matched by the glob pattern
            #print(list(hello_files))

    filesMalware = Path("./M2").glob('*.opseq')

    for f in filesMalware:
        #print("Entering the loop")  # Add this line to check if the loop is entered
        """
        Yes, that's correct! In the context of the provided code, f represents the path to the file 
        (a Path object), and file represents the file object (a TextIOWrapper object) that allows you 
        to interact with the contents of the file specified by the path f.
        """

        #with open(f, "r") as file:
        #print("\n\nnew file\n\n")

        indices_list = open_opseq(f)
        assert 218 in indices_list
        data = opseqLabels(indices_list, 0)
        #print(data.opseq)
        #print(data.label)
        opseq_labels.append(data)

# Reset the generator since it was consumed by the above list() call
#hello_files = Path("../Hello").glob('*.txt')

#def printline(line_path: Path):


def _test():
    opseq_path = Path("short.opseq")
    indices_list = open_opseq(opseq_path)
    assert 218 in indices_list
    print(indices_list)

def open_opseq(opseq_path: Path) -> list[int]:
    with open(opseq_path) as file:
        lines = file.readlines()
    indices_list = []
    for line in lines:
        chunks = [line[i : i + 2] for i in range(0, len(line), 2)]
        indices_list += opseq_to_index(chunks)
    return indices_list

if __name__ == "__main__":
    #_test() 
    readFiles()
    printListOpseqLabels(opseq_labels)